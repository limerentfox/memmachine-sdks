{
  "openapi": "3.0.0",
  "info": {
    "title": "MemMachine Unified API",
    "version": "1.0.0",
    "description": "Unified API specification for the MemMachine memory system, detailing both standard RESTful endpoints for direct interaction and dedicated MCP Server endpoints optimized for LLM tool use."
  },
  "servers": [
    {
      "url": "http://localhost:8080/v1",
      "description": "The base path for all standard RESTful API endpoints."
    }
  ],
  "tags": [
    {
      "name": "RESTful APIs",
      "description": "Standard RESTful API endpoints, typically consumed directly by applications and front-end clients for general memory management."
    },
    {
      "name": "MCP Server APIs",
      "description": "API endpoints exposed as tools and resources, primarily for use with an LLM via the MCP server/FastMCP implementation."
    }
  ],
  "paths": {
    "/memories": {
      "post": {
        "tags": [
          "RESTful APIs"
        ],
        "summary": "Add Memories (Unified)",
        "description": "Retrieves the appropriate memory instance and adds the episode to **both** episodic and profile memory.",
        "operationId": "add_memory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEpisode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Memory successfully added."
          },
          "400": {
            "description": "Invalid producer or produced_for ID (not in the session context)."
          },
          "404": {
            "description": "No matching episodic memory instance found for the session context."
          }
        }
      },
      "delete": {
        "tags": [
          "RESTful APIs"
        ],
        "summary": "Delete Session Data (Unified)",
        "description": "Deletes all episodic and profile data associated with a particular session.",
        "operationId": "delete_session_data",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteDataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session data successfully deleted."
          },
          "404": {
            "description": "No matching episodic memory instance found."
          }
        }
      }
    },
    "/memories/episodic": {
      "post": {
        "tags": [
          "RESTful APIs"
        ],
        "summary": "Add Episodic Memory",
        "description": "Adds a memory episode **only to episodic memory** (short-term and long-term conversational history).",
        "operationId": "add_episodic_memory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEpisode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Memory successfully added to episodic memory."
          },
          "400": {
            "description": "Invalid producer or produced_for ID (not in the session context)."
          },
          "404": {
            "description": "No matching episodic memory instance found for the session context."
          }
        }
      }
    },
    "/memories/profile": {
      "post": {
        "tags": [
          "RESTful APIs"
        ],
        "summary": "Add Profile Memory",
        "description": "Adds a memory episode **only to profile memory** (long-term persona knowledge/facts).",
        "operationId": "add_profile_memory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEpisode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Memory successfully added to profile memory."
          }
        }
      }
    },
    "/memories/search": {
      "post": {
        "tags": [
          "RESTful APIs"
        ],
        "summary": "Search Memories (Unified)",
        "description": "Performs concurrent searches in **both** episodic and profile memory based on the provided query and session context.",
        "operationId": "search_memory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search results returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            }
          },
          "404": {
            "description": "No matching episodic memory instance found."
          }
        }
      }
    },
    "/memories/episodic/search": {
      "post": {
        "tags": [
          "RESTful APIs"
        ],
        "summary": "Search Episodic Memory",
        "description": "Searches **only the episodic memory** (short-term and long-term conversational history).",
        "operationId": "search_episodic_memory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search results returned from episodic memory.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            }
          },
          "404": {
            "description": "No matching episodic memory instance found."
          }
        }
      }
    },
    "/memories/profile/search": {
      "post": {
        "tags": [
          "RESTful APIs"
        ],
        "summary": "Search Profile Memory",
        "description": "Searches **only the profile memory** (long-term persona knowledge/facts).",
        "operationId": "search_profile_memory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search results returned from profile memory.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/sessions": {
      "get": {
        "tags": [
          "RESTful APIs"
        ],
        "summary": "Get All Sessions",
        "description": "Retrieves a list of all active memory sessions managed by the system.",
        "operationId": "get_all_sessions",
        "responses": {
          "200": {
            "description": "A list of all sessions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllSessionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/sessions": {
      "get": {
        "tags": [
          "RESTful APIs"
        ],
        "summary": "Get User Sessions",
        "description": "Retrieves all sessions for a particular user ID.",
        "operationId": "get_sessions_for_user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user whose sessions are requested."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sessions for the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllSessionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_id}/sessions": {
      "get": {
        "tags": [
          "RESTful APIs"
        ],
        "summary": "Get Group Sessions",
        "description": "Retrieves all sessions for a particular group ID.",
        "operationId": "get_sessions_for_group",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the group whose sessions are requested."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sessions for the specified group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllSessionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/agents/{agent_id}/sessions": {
      "get": {
        "tags": [
          "RESTful APIs"
        ],
        "summary": "Get Agent Sessions",
        "description": "Retrieves all sessions for a particular agent ID.",
        "operationId": "get_sessions_for_agent",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent whose sessions are requested."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sessions for the specified agent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllSessionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "RESTful APIs"
        ],
        "summary": "Health Check",
        "description": "Health check endpoint for container orchestration, verifying initialization of memory managers and basic service status.",
        "operationId": "health_check",
        "responses": {
          "200": {
            "description": "Service is healthy.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "healthy",
                      "description": "The health status of the service."
                    },
                    "service": {
                      "type": "string",
                      "example": "memmachine",
                      "description": "The name of the service."
                    },
                    "version": {
                      "type": "string",
                      "example": "1.0.0",
                      "description": "The version of the service."
                    },
                    "memory_managers": {
                      "type": "object",
                      "description": "Status of core memory components.",
                      "properties": {
                        "profile_memory": {
                          "type": "boolean",
                          "description": "True if ProfileMemory is initialized."
                        },
                        "episodic_memory": {
                          "type": "boolean",
                          "description": "True if EpisodicMemoryManager is initialized."
                        }
                      },
                      "required": [
                        "profile_memory",
                        "episodic_memory"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "service",
                    "version",
                    "memory_managers"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service is unhealthy or memory managers are not initialized."
          }
        }
      }
    },
    "/mcp/add_session_memory": {
      "post": {
        "tags": [
          "MCP Server APIs"
        ],
        "summary": "Tool: Add Memory (Unified)",
        "description": "Adds a memory episode directly using the full session data provided in the `NewEpisode` object to **both** episodic and profile memory. This is an LLM tool.",
        "operationId": "mcp_add_session_memory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEpisode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status 0 if the memory was added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "Status code (0 for success)."
                    },
                    "error_msg": {
                      "type": "string",
                      "description": "Error message if status is non-zero."
                    }
                  },
                  "required": [
                    "status",
                    "error_msg"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/mcp/add_episodic_memory": {
      "post": {
        "tags": [
          "MCP Server APIs"
        ],
        "summary": "Tool: Add Episodic Memory",
        "description": "Adds a memory episode directly using the full session data provided in the `NewEpisode` object **only to episodic memory**. This is an LLM tool.",
        "operationId": "mcp_add_episodic_memory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEpisode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status 0 if the memory was added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "Status code (0 for success)."
                    },
                    "error_msg": {
                      "type": "string",
                      "description": "Error message if status is non-zero."
                    }
                  },
                  "required": [
                    "status",
                    "error_msg"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/mcp/add_profile_memory": {
      "post": {
        "tags": [
          "MCP Server APIs"
        ],
        "summary": "Tool: Add Profile Memory",
        "description": "Adds a memory episode directly using the full session data provided in the `NewEpisode` object **only to profile memory**. This is an LLM tool.",
        "operationId": "mcp_add_profile_memory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEpisode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status 0 if the memory was added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "Status code (0 for success)."
                    },
                    "error_msg": {
                      "type": "string",
                      "description": "Error message if status is non-zero."
                    }
                  },
                  "required": [
                    "status",
                    "error_msg"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/mcp/search_episodic_memory": {
      "post": {
        "tags": [
          "MCP Server APIs"
        ],
        "summary": "Tool: Search Episodic Memory",
        "description": "Searches **only episodic memory** for the provided query using the full session data in the request body. This is an LLM tool.",
        "operationId": "mcp_search_episodic_memory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A search result object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/mcp/search_profile_memory": {
      "post": {
        "tags": [
          "MCP Server APIs"
        ],
        "summary": "Tool: Search Profile Memory",
        "description": "Searches **only profile memory** for the provided query using the full session data in the request body. This is an LLM tool.",
        "operationId": "mcp_search_profile_memory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A search result object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/mcp/search_session_memory": {
      "post": {
        "tags": [
          "MCP Server APIs"
        ],
        "summary": "Tool: Search Memory (Unified)",
        "description": "Searches **both** episodic and profile memories for the provided query using the full session data in the request body. This is an LLM tool.",
        "operationId": "mcp_search_session_memory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A search result object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/mcp/delete_session_data": {
      "post": {
        "tags": [
          "MCP Server APIs"
        ],
        "summary": "Tool: Delete Session Data (Self-Contained)",
        "description": "Deletes all data associated with the provided session data. This is an LLM tool.",
        "operationId": "mcp_delete_session_data",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteDataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status 0 if deletion was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "Status code (0 for success)."
                    },
                    "error_msg": {
                      "type": "string",
                      "description": "Error message if status is non-zero."
                    }
                  },
                  "required": [
                    "status",
                    "error_msg"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/mcp/delete_data": {
      "post": {
        "tags": [
          "MCP Server APIs"
        ],
        "summary": "Tool: Delete All Data (Contextual)",
        "description": "Deletes all data associated with the *currently active session* stored in the MCP context. This LLM tool does not require a request body.",
        "operationId": "mcp_delete_data",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status 0 if deletion was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "Status code (0 for success)."
                    },
                    "error_msg": {
                      "type": "string",
                      "description": "Error message if status is non-zero."
                    }
                  },
                  "required": [
                    "status",
                    "error_msg"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/mcp/sessions": {
      "get": {
        "tags": [
          "MCP Server APIs"
        ],
        "summary": "Resource: All Memory Sessions",
        "description": "Retrieves all memory sessions as an LLM resource.",
        "operationId": "mcp_get_sessions",
        "responses": {
          "200": {
            "description": "An AllSessionsResponse containing a list of all sessions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllSessionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/mcp/users/{user_id}/sessions": {
      "get": {
        "tags": [
          "MCP Server APIs"
        ],
        "summary": "Resource: Get User Sessions",
        "description": "Retrieves all sessions for a specific user as an LLM resource.",
        "operationId": "mcp_get_user_sessions",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user whose sessions are requested."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sessions for the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllSessionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/mcp/groups/{group_id}/sessions": {
      "get": {
        "tags": [
          "MCP Server APIs"
        ],
        "summary": "Resource: Get Group Sessions",
        "description": "Retrieves all sessions for a specific group as an LLM resource.",
        "operationId": "mcp_get_group_sessions",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the group whose sessions are requested."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sessions for the group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllSessionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/mcp/agents/{agent_id}/sessions": {
      "get": {
        "tags": [
          "MCP Server APIs"
        ],
        "summary": "Resource: Get Agent Sessions",
        "description": "Retrieves all sessions for a specific agent as an LLM resource.",
        "operationId": "mcp_get_agent_sessions",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the agent whose sessions are requested."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sessions for the agent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllSessionsResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SessionData": {
        "title": "SessionData",
        "type": "object",
        "description": "Defines the context of a memory session.",
        "properties": {
          "group_id": {
            "type": "string",
            "nullable": true,
            "description": "Optional group ID."
          },
          "agent_id": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "List of agents involved in the session."
          },
          "user_id": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "List of users involved in the session."
          },
          "session_id": {
            "type": "string",
            "description": "Unique session identifier."
          }
        },
        "required": [
          "session_id"
        ]
      },
      "NewEpisode": {
        "title": "NewEpisode",
        "type": "object",
        "description": "Data model for adding a new memory episode.",
        "properties": {
          "session": {
            "$ref": "#/components/schemas/SessionData",
            "description": "The session context for the episode."
          },
          "producer": {
            "type": "string",
            "description": "The ID of the entity that produced the content."
          },
          "produced_for": {
            "type": "string",
            "description": "The ID of the entity the content was produced for."
          },
          "episode_content": {
            "description": "The content, either as raw text or an embedding vector.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            ]
          },
          "episode_type": {
            "type": "string",
            "description": "The type of content (e.g., 'dialog', 'summary')."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true,
            "description": "Optional arbitrary metadata."
          }
        },
        "required": [
          "session",
          "producer",
          "produced_for",
          "episode_content",
          "episode_type"
        ]
      },
      "SearchQuery": {
        "title": "SearchQuery",
        "type": "object",
        "description": "Data model for querying the memory system.",
        "properties": {
          "session": {
            "$ref": "#/components/schemas/SessionData",
            "description": "The session context for the search."
          },
          "query": {
            "type": "string",
            "description": "The natural language query or concept."
          },
          "filter": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true,
            "description": "Optional filters for episodic/profile memory."
          },
          "limit": {
            "type": "integer",
            "nullable": true,
            "description": "Maximum number of results to return."
          }
        },
        "required": [
          "session",
          "query"
        ]
      },
      "SearchResult": {
        "title": "SearchResult",
        "type": "object",
        "description": "Unified response model for memory search results.",
        "properties": {
          "status": {
            "type": "integer",
            "default": 0,
            "description": "Status code (0 for success, non-zero for error)."
          },
          "content": {
            "type": "object",
            "additionalProperties": true,
            "description": "The combined search results from memory. Varies by endpoint."
          }
        },
        "required": [
          "status",
          "content"
        ]
      },
      "DeleteDataRequest": {
        "title": "DeleteDataRequest",
        "type": "object",
        "description": "Data model for deleting all data associated with a session.",
        "properties": {
          "session": {
            "$ref": "#/components/schemas/SessionData",
            "description": "The session context whose data should be deleted."
          }
        },
        "required": [
          "session"
        ]
      },
      "MemorySession": {
        "title": "MemorySession",
        "type": "object",
        "description": "Model representing a single active memory session.",
        "properties": {
          "user_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of user IDs associated with the session."
          },
          "session_id": {
            "type": "string",
            "description": "Unique session identifier."
          },
          "group_id": {
            "type": "string",
            "nullable": true,
            "description": "Optional group ID."
          },
          "agent_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "List of agent IDs associated with the session."
          }
        },
        "required": [
          "user_ids",
          "session_id"
        ]
      },
      "AllSessionsResponse": {
        "title": "AllSessionsResponse",
        "type": "object",
        "description": "Response model containing a list of all retrieved memory sessions.",
        "properties": {
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemorySession"
            },
            "description": "The list of session objects."
          }
        },
        "required": [
          "sessions"
        ]
      }
    }
  }
}